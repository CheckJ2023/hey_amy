import 'dart:convert';

import 'package:http/http.dart' as http;

import '../util/api_util.dart';


class OpenAIService {

  late final String _openAIAPIkey ;
  //the list of messages is for gpt continue a conversation remembering what we talk to it before.
  final List<Map<String,String>> _messages = [];


  Future<String> isArtPromptAPI(String prompt) async {
    print('start isartpromptapi');
    try {
    //how to hide the API key? use environment variables or configuration files to store and retrieve your API key securely.
    //Note that variables declared with final below are automatically determined type by dart
    const endpoint = 'https://api.openai.com/v1/audio/translations';
    // _openAIAPIkey=ApiUtil().getAPIkey();
    _openAIAPIkey=api_key;
    // prompt="yes";
    print(_openAIAPIkey);
    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $_openAIAPIkey',
    };
    final messages = [
      {
        'role': 'user',
        'content': 'Does this message want to generate an AI picture, image, art or anything similar? $prompt. Simply answer with a yes or no.',
      }
    ];
    final data = {
      "model": "gpt-3.5-turbo",
      "messages": messages,
    };
    //   'prompt' : message,
    //   'max_tokens':50,// Adjust as needed
    // };

      final response = await http.post(
        Uri.parse(endpoint),
        headers: headers,
        body: json.encode(data),
      );
      print(response.body);
      if (response.statusCode == 200) {
        String content = jsonDecode(response.body)['choices'][0]['message']['content'];
        content = content.trim();

        switch(content) {
          case 'Yes':
          case 'yes':
          case 'Yes.':
          case 'yes.':
            final response = await dallEAPI(prompt);
            return response;
          default:
            final response = await chatGPTAPI(prompt);
            return response;
        }
      }
      // return 'AI';
      // return 'An internal error occurred';
      return '幹拎娘機掰.isArtPromptAPI 有ERROR啦';
    } catch (e) {
      return e.toString();
    }
  }

  Future<String> chatGPTAPI(String prompt) async {
    // return 'CHATGPT';
    //store whatever user said
    _messages.add({
      "role":"user",
      "content":prompt,
    });
    try {
      const endpoint = 'https://api.openai.com/v1/audio/translations';
      _openAIAPIkey=api_key;
      // prompt="yes";
      print(_openAIAPIkey);
      final headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $_openAIAPIkey',
      };
      final data = {
        "model": "gpt-3.5-turbo",
        "messages": _messages,
      };

      final response = await http.post(
        Uri.parse(endpoint),
        headers: headers,
        body: json.encode(data),
      );

      print(response.body);
      if (response.statusCode == 200) {
        String content = jsonDecode(response.body)['choices'][0]['message']['content'];
        content = content.trim();
        _messages.add({
          "role":"user",
          "content":content,
        });
        return content;
      }
      // return 'AI';
      return '幹拎娘機掰.CHATGPTAPI 有ERROR啦';
    } catch (e) {
      return e.toString();
    }
  }

  Future<String> dallEAPI(String prompt) async {
    // return 'DALL-E';
    // return 'CHATGPT';
    //store whatever user said
    _messages.add({
      "role":"user",
      "content":prompt,
    });
    try {
      const endpoint = 'https://api.openai.com/v1/images/generations';
      _openAIAPIkey=api_key;
      // prompt="yes";
      print(_openAIAPIkey);
      final headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $_openAIAPIkey',
      };
      final data = {
        "prompt" : prompt,
        "n":1, //number of image u want to generate
      };
      //   'prompt' : message,
      //   'max_tokens':50,// Adjust as needed
      // };

      final response = await http.post(
        Uri.parse(endpoint),
        headers: headers,
        body: json.encode(data),
      );

      print(response.body);
      if (response.statusCode == 200) {
        String image_url = jsonDecode(response.body)['data'][0]['url'];
        image_url = image_url.trim();
        _messages.add({
          "role":"user",
          "content":image_url,
        });
        return image_url;
      }
      // return 'AI';
      return 'An internal error occurred';
    } catch (e) {
      return e.toString();
    }
  }
}
